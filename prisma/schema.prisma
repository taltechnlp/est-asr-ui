generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model File {
  id                       String    @id @db.VarChar(30)
  state                    String    @default("UPLOADED") @db.Text()
  text                     String?   @db.Text()
  path                     String    @db.Text()
  filename                 String    @db.Text()
  language                 String    @db.Text()
  duration                 Decimal?
  uploadedAt               DateTime?
  mimetype                 String    @db.Text()
  encoding                 String    @db.Text()
  externalId               String?   @db.Text()
  textTitle                String?   @db.Text()
  initialTranscriptionPath String?   @db.Text()
  initialTranscription     String?   @db.Text()
  uploader                 String?   @db.VarChar(30)
  User                     User?     @relation(fields: [uploader], references: [id], onUpdate: NoAction, onDelete: Cascade)
  workflows                NfWorkflow[]
  chatSessions             ChatSession[]
  transcriptSummary        TranscriptSummary?
  analysisSegments         AnalysisSegment[]
  notify                   Boolean?
  notified                 Boolean?
}

enum Role {
  USER
  ADMIN
}

// Better Auth Account model
model Account {
  id                    String    @id
  userId                String
  type                  String    @default("oauth")
  provider              String
  providerAccountId     String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

// Better Auth Session model
model Session {
  id        String   @id
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

// Updated User model for Better Auth
model User {
  id               String    @id @db.VarChar(30)
  email            String    @unique(map: "default$default.User.email._UNIQUE")
  name             String
  password         String?
  resetToken       String?
  resetTokenExpiry BigInt?
  role             Role      @default(USER)
  emailVerified    DateTime?
  image            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  files            File[]
  accounts         Account[]
  sessions         Session[]
  chatSessions     ChatSession[]

  @@map("user")
}

// Better Auth Verification model
model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@map("verification")
}

enum NfStatus {
  PENDING
  SUBMITTED
  RUNNING
  CACHED
  COMPLETED
  ERROR
  FAILED
  ABORTED
}

enum NfEvent {
  started
  process_submitted
  process_started
  process_completed
  error
  completed
}

model NfWorkflow {
  run_id         String      @unique
  event          NfEvent
  run_name       String      @unique
  utc_time       DateTime
  file_id        String
  file           File        @relation(fields: [file_id], references: [id], onDelete: Cascade)
  processes      NfProcess[]
  succeededCount Int?
  runningCount   Int?
  pendingCount   Int?
  failedCount    Int?
  progressLength Int?
}

model NfProcess {
  id          String     @id @default(cuid())
  task_id     Int
  process     String
  tag         String?
  hash        String
  status      NfStatus
  exit        DateTime?
  start       DateTime?
  submit      DateTime?
  complete    DateTime?
  duration    Int?
  realtime    Int?
  cpu         Float?
  mem         Float?
  peak_rss    Float?
  peak_vmem   Float?
  rchar       Float?
  wchar       Float?
  vol_ctxt    Int?
  inv_ctxt    Int?
  workflow_id String
  workflow    NfWorkflow @relation(fields: [workflow_id], references: [run_id], onDelete: Cascade)
}

// Chat session for transcript analysis
model ChatSession {
  id        String   @id @default(cuid())
  fileId    String
  userId    String
  messages  Json     // Array of chat messages with analysis history
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  file      File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([fileId])
  @@index([userId])
}

// Transcript summary generated by AI
model TranscriptSummary {
  id           String   @id @default(cuid())
  fileId       String   @unique
  summary      String   @db.Text
  keyTopics    String[] // JSON array of main topics
  speakerCount Int
  language     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  file         File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
}

// Analysis segments for incremental processing
model AnalysisSegment {
  id           String   @id @default(cuid())
  fileId       String
  segmentIndex Int
  startTime    Float    // Start time in seconds
  endTime      Float    // End time in seconds
  startWord    Int
  endWord      Int
  originalText String   @db.Text
  analysis     String   @db.Text
  suggestions  Json     // Store improvement suggestions
  nBestResults Json?    // Store N-best ASR alternatives
  status       String   @default("pending") // pending, analyzed, applied
  createdAt    DateTime @default(now())
  file         File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  
  @@unique([fileId, segmentIndex])
  @@index([fileId])
}